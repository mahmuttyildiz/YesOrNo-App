{"version":3,"sources":["components/AnswerComponent/style.js","components/AnswerComponent/AnswerComponent.js","components/AnswerComponent/index.js","components/SearchComponent/style.js","components/SearchComponent/SearchComponent.js","components/SearchComponent/index.js","styles.js","App.js","serviceWorker.js","index.js"],"names":["StyledContainer","styled","div","StyledGif","img","StyledHeader","h3","StyledImage","AnswerComponent","questionInput","useState","isLoaded","setIsLoaded","items","setItems","fetchApi","a","fetch","res","json","data","console","error","useEffect","answer","src","image","alt","defaultProps","StyledForm","form","StyledInput","input","StyledButton","button","SearchComponent","entry","setEntry","setQuestionInput","isEmpty","setIsEmpty","isQuestion","setIsQuestion","errorMessage","onSubmit","e","preventDefault","checkEmpty","length","checkBlank","trimEnd","charAt","className","type","name","placeholder","value","onChange","target","GlobalStyle","createGlobalStyle","StyledApp","StyledH1","h1","StyledH2","h2","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b18ac384.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledContainer = styled.div``;\n\nexport const StyledGif = styled.img`\n  margin-top: 1rem;\n  width: 3rem;\n  height: 3rem;\n`;\n\nexport const StyledHeader = styled.h3``;\n\nexport const StyledImage = styled.img``;\n","import React, { useState, useEffect } from \"react\";\nimport propTypes from \"prop-types\";\nimport { StyledContainer, StyledHeader, StyledImage, StyledGif } from \"./style\";\n\nfunction AnswerComponent({ questionInput }) {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const gifSrc = \"https://media.giphy.com/media/L05HgB2h6qICDs5Sms/giphy.gif\";\n\n  const fetchApi = async () => {\n    try {\n      const res = await fetch(\"https://yesno.wtf/api\");\n      const data = await res.json();\n      setItems(data);\n      setIsLoaded(true);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    fetchApi();\n  }, []);\n\n  return (\n    <>\n      {!isLoaded ? (\n        <StyledContainer>\n          <StyledGif src={gifSrc} />\n        </StyledContainer>\n      ) : (\n        <StyledContainer>\n          <StyledHeader>Question: {questionInput}</StyledHeader>\n          <StyledHeader>Answer: {items.answer} </StyledHeader>\n          <StyledImage src={items.image} alt={`$'answer img'`} />\n        </StyledContainer>\n      )}\n    </>\n  );\n}\n\nexport default AnswerComponent;\n\nAnswerComponent.propTypes = {\n  questionInput: propTypes.string\n};\nAnswerComponent.defaultProps = {\n  questionInput: \"\"\n};\n","import AnswerComponent from \"./AnswerComponent\";\n\nexport default AnswerComponent;\n","import styled from \"styled-components\";\n\nexport const StyledContainer = styled.div`\n  max-width: 100vw;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const StyledForm = styled.form``;\n\nexport const StyledInput = styled.input`\n  font-size: 1.6rem;\n  padding: 0.5rem 2rem;\n  line-height: 2.8rem;\n  border-radius: 20px;\n  border: 1px solid #ddd;\n  max-width: 80vw;\n  outline: none;\n`;\nexport const StyledButton = styled.button`\n  background-color: rgba(0, 0, 0, 0.75);\n  color: #fff;\n  padding: 1.1rem 2rem;\n  margin-left: 5px;\n  border: 1px solid rgba(0, 0, 0, 0.75);\n  border-radius: 20px;\n  font-size: 1.4rem;\n  cursor: pointer;\n  transition: background-color 250ms;\n  max-width: 20vw;\n  text-align: center;\n\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.85);\n  }\n`;\n","import React, { useState } from \"react\";\nimport AnswerComponent from \"../AnswerComponent/\";\nimport {\n  StyledForm,\n  StyledInput,\n  StyledButton,\n  StyledContainer\n} from \"./style\";\n\nfunction SearchComponent() {\n  const [entry, setEntry] = useState(\"\");\n  const [questionInput, setQuestionInput] = useState(\"\");\n  const [isEmpty, setIsEmpty] = useState(false);\n  const [isQuestion, setIsQuestion] = useState(true);\n\n  const changeHandler = e => {\n    setEntry(e.target.value);\n    setIsEmpty(false);\n    setIsQuestion(true);\n    setQuestionInput(\"\");\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    const checkEmpty =\n      entry.length !== 0 ? setIsEmpty(false) : setIsEmpty(true);\n\n    const checkBlank = entry.trimEnd();\n\n    return checkEmpty || checkBlank.charAt(checkBlank.length - 1) === \"?\"\n      ? (setIsQuestion(true), setQuestionInput(entry))\n      : setIsQuestion(false);\n  };\n\n  const errorMessage = isEmpty ? (\n    <h4>This section cannot be blank...</h4>\n  ) : !isQuestion ? (\n    <h4>\n      It seems you did not ask a question with the correct way. <br />\n      Please add a question mark at the end of the sentence and try it again(?)\n    </h4>\n  ) : (\n    \"\"\n  );\n\n  return (\n    <>\n      <StyledContainer>\n        {errorMessage}\n        <StyledForm onSubmit={submitHandler}>\n          <StyledInput\n            className=\"input\"\n            type=\"text\"\n            name=\"query\"\n            placeholder=\"Ask Me\"\n            value={entry}\n            onChange={changeHandler}\n          />\n\n          <StyledButton type=\"submit\">Search</StyledButton>\n        </StyledForm>\n      </StyledContainer>\n\n      <StyledContainer>\n        {questionInput !== \"\" ? (\n          <AnswerComponent questionInput={questionInput} />\n        ) : (\n          \"\"\n        )}\n      </StyledContainer>\n    </>\n  );\n}\n\nexport default SearchComponent;\n","import SearchComponent from \"./SearchComponent\";\n\nexport default SearchComponent;\n","import styled, {createGlobalStyle} from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    background: #fafafa;\n  }\n`\n\nexport const StyledContainer = styled.div`\n  min-height: 100vh;\n`;\nexport const StyledApp = styled.div`\n  font-family: sans-serif;\n  text-align: center;\n`;\nexport const StyledH1 = styled.h1``;\nexport const StyledH2 = styled.h2``;\n","import React from 'react';\nimport { SearchComponent } from \"./components\";\nimport { StyledApp, StyledContainer, StyledH1, StyledH2 } from \"./styles\";\n\n\nfunction App() {\n  return (\n    <>\n    <StyledContainer>\n    <StyledApp>\n      <StyledH1>Yes or No App</StyledH1>\n      <StyledH2>Type your question below</StyledH2>\n      <SearchComponent />\n    </StyledApp>\n  </StyledContainer>\n  </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {GlobalStyle} from './styles'\n\nReactDOM.render(\n  <>\n    <GlobalStyle />\n    <App />\n  </>\n  ,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}